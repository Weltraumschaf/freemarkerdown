#macro( snippet $file $name )
#set( $snippetFile = $file)
#set( $snippetName = $name)
#parse( "snippet" )
#end

Examples
========

Render Single Fragment with Markdown
------------------------------------

This is an example to render a template from string:

#snippet( "/src/test/java/de/weltraumschaf/freemarkerdown/ExamplesTest.java" , "renderSingleFragmentwithMarkdownFromStringTemplate")

This is an example to render a template from file:

#snippet( "/src/test/java/de/weltraumschaf/freemarkerdown/ExamplesTest.java" , "renderSingleFragmentwithMarkdownFromFileTemplate")

Render Layout with Fragments and Markdown
-----------------------------------------

This is an example to render a templates from strings:

#snippet( "/src/test/java/de/weltraumschaf/freemarkerdown/ExamplesTest.java" , "renderLayoutwithFragmentsandMarkdownFromStringTemplate")

This is an example to render a templates from files:

#snippet( "/src/test/java/de/weltraumschaf/freemarkerdown/ExamplesTest.java" , "renderLayoutwithFragmentsandMarkdownFromFileTemplate")

Render Without Markdown
-----------------------

This example shows how to suppress the Markdown processing.

#snippet( "/src/test/java/de/weltraumschaf/freemarkerdown/ExamplesTest.java" , "renderWithoutMarkdown")

Render With Preprocessor
------------------------

This example shows how to use preprocessors. The used key value preprocessor
is part of FreeMarkerDown by default.

#snippet( "/src/test/java/de/weltraumschaf/freemarkerdown/ExamplesTest.java" , "renderWithPreprocessor")

Layout Propagates Variables
---------------------------

Template variables assigned to a layout are propagated to all
subsequent assigned template models. It does not matter if you assign
the model before or after assigning variables. They will be propagated
anyway.

#snippet( "/src/test/java/de/weltraumschaf/freemarkerdown/ExamplesTest.java" , "layoutPropagatesVariables")

Handling Template Errors
------------------------

Except the standard Java exceptions (IOExceptio etc.) no checked exceptions
will be thrown. The Checked template exception from FreeMarker is wrapped
into an unchecked template error. This does not clutter the code with "throws",
but gives you the responsibility to ensure that templates will render in all circumstances
or catch them at appropriate position.

#snippet( "/src/test/java/de/weltraumschaf/freemarkerdown/ExamplesTest.java" , "handlingTemplateErrors")

More Complex Example
--------------------

TODO

#snippet( "/src/test/java/de/weltraumschaf/freemarkerdown/ExamplesTest.java" , "threeModelsCascadedTwoOfThemWithoutMarkdown")